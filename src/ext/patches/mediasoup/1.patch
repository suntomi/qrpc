diff --git a/worker/include/handles/UnixStreamSocket.hpp b/worker/include/handles/UnixStreamSocket.hpp
index 5d3f0576..392d25d7 100644
--- a/worker/include/handles/UnixStreamSocket.hpp
+++ b/worker/include/handles/UnixStreamSocket.hpp
@@ -34,34 +34,30 @@ public:
 		CONSUMER
 	};
 
+	typedef std::function<void(const uint8_t* data, size_t len)> Writer;
+
 public:
-	UnixStreamSocket(int fd, size_t bufferSize, UnixStreamSocket::Role role);
+	UnixStreamSocket(int fd, size_t bufferSize, UnixStreamSocket::Role role) {
+		this->bufferSize = bufferSize;
+		this->role       = role;
+		this->buffer     = new uint8_t[bufferSize];
+	}
 	UnixStreamSocket& operator=(const UnixStreamSocket&) = delete;
 	UnixStreamSocket(const UnixStreamSocket&)            = delete;
 	virtual ~UnixStreamSocket();
 
 public:
-	void Close();
-	bool IsClosed() const
-	{
-		return this->closed;
-	}
-	void Write(const uint8_t* data, size_t len);
+	void Close() {}
+	bool IsClosed() const { return true; }
+	static void SetWriter(Writer w) { writer_ = w; }
+	void Write(const uint8_t* data, size_t len) { writer_(data, len); }
 
-	/* Callbacks fired by UV events. */
-public:
-	void OnUvReadAlloc(size_t suggestedSize, uv_buf_t* buf);
-	void OnUvRead(ssize_t nread, const uv_buf_t* buf);
-	void OnUvWriteError(int error);
-
-	/* Pure virtual methods that must be implemented by the subclass. */
 protected:
 	virtual void UserOnUnixStreamRead()         = 0;
 	virtual void UserOnUnixStreamSocketClosed() = 0;
+	static Writer writer_;
 
 private:
-	// Allocated by this.
-	uv_pipe_t* uvHandle{ nullptr };
 	// Others.
 	bool closed{ false };
 	bool isClosedByPeer{ false };
diff --git a/worker/meson.build b/worker/meson.build
index 45c5528f..a37c04f8 100644
--- a/worker/meson.build
+++ b/worker/meson.build
@@ -220,6 +220,18 @@ catch2_proj = subproject(
 libwebrtc_include_directories = include_directories('include')
 subdir('deps/libwebrtc')
 
+cpparg = custom_target(
+  'cpparg',
+  output : 'ms_cpparg.txt',
+  env: {
+    'CPPARGS': cpp_args,
+  },
+  command : [find_program('bash'), '-c', 'echo "${CPPARGS}" > ' + join_paths(meson.source_root(),'out','@OUTPUT@')],
+)
+cpparg_dep = declare_dependency(
+  sources: cpparg
+)
+
 dependencies = [
   abseil_cpp_proj.get_variable('absl_container_dep'),
   openssl_proj.get_variable('openssl_dep'),
@@ -228,6 +240,7 @@ dependencies = [
   libsrtp2_proj.get_variable('libsrtp2_dep'),
   usrsctp_proj.get_variable('usrsctp_dep'),
   libwebrtc_dep,
+  cpparg_dep,
 ]
 
 link_whole = [
diff --git a/worker/src/Channel/ChannelSocket.cpp b/worker/src/Channel/ChannelSocket.cpp
index 473b8927..7b9dd37c 100644
--- a/worker/src/Channel/ChannelSocket.cpp
+++ b/worker/src/Channel/ChannelSocket.cpp
@@ -14,21 +14,6 @@ namespace Channel
 	static constexpr size_t MessageMaxLen{ 4194308 };
 	static constexpr size_t PayloadMaxLen{ 4194304 };
 
-	/* Static methods for UV callbacks. */
-
-	inline static void onAsync(uv_handle_t* handle)
-	{
-		while (static_cast<ChannelSocket*>(handle->data)->CallbackRead())
-		{
-			// Read while there are new messages.
-		}
-	}
-
-	inline static void onCloseAsync(uv_handle_t* handle)
-	{
-		delete reinterpret_cast<uv_async_t*>(handle);
-	}
-
 	/* Instance methods. */
 
 	ChannelSocket::ChannelSocket(int consumerFd, int producerFd)
@@ -48,32 +33,6 @@ namespace Channel
 	    channelWriteCtx(channelWriteCtx)
 	{
 		MS_TRACE_STD();
-
-		int err;
-
-		this->uvReadHandle       = new uv_async_t;
-		this->uvReadHandle->data = static_cast<void*>(this);
-
-		err =
-		  uv_async_init(DepLibUV::GetLoop(), this->uvReadHandle, reinterpret_cast<uv_async_cb>(onAsync));
-
-		if (err != 0)
-		{
-			delete this->uvReadHandle;
-			this->uvReadHandle = nullptr;
-
-			MS_THROW_ERROR_STD("uv_async_init() failed: %s", uv_strerror(err));
-		}
-
-		err = uv_async_send(this->uvReadHandle);
-
-		if (err != 0)
-		{
-			delete this->uvReadHandle;
-			this->uvReadHandle = nullptr;
-
-			MS_THROW_ERROR_STD("uv_async_send() failed: %s", uv_strerror(err));
-		}
 	}
 
 	ChannelSocket::~ChannelSocket()
@@ -98,12 +57,6 @@ namespace Channel
 
 		this->closed = true;
 
-		if (this->uvReadHandle)
-		{
-			uv_close(
-			  reinterpret_cast<uv_handle_t*>(this->uvReadHandle), static_cast<uv_close_cb>(onCloseAsync));
-		}
-
 		if (this->consumerSocket)
 		{
 			this->consumerSocket->Close();
diff --git a/worker/src/PayloadChannel/PayloadChannelSocket.cpp b/worker/src/PayloadChannel/PayloadChannelSocket.cpp
index 6f407a09..8891125d 100644
--- a/worker/src/PayloadChannel/PayloadChannelSocket.cpp
+++ b/worker/src/PayloadChannel/PayloadChannelSocket.cpp
@@ -15,21 +15,6 @@ namespace PayloadChannel
 	static constexpr size_t MessageMaxLen{ 4194308 };
 	static constexpr size_t PayloadMaxLen{ 4194304 };
 
-	/* Static methods for UV callbacks. */
-
-	inline static void onAsync(uv_handle_t* handle)
-	{
-		while (static_cast<PayloadChannelSocket*>(handle->data)->CallbackRead())
-		{
-			// Read while there are new messages.
-		}
-	}
-
-	inline static void onCloseAsync(uv_handle_t* handle)
-	{
-		delete reinterpret_cast<uv_async_t*>(handle);
-	}
-
 	/* Instance methods. */
 
 	PayloadChannelSocket::PayloadChannelSocket(int consumerFd, int producerFd)
@@ -49,32 +34,6 @@ namespace PayloadChannel
 	    payloadChannelWriteFn(payloadChannelWriteFn), payloadChannelWriteCtx(payloadChannelWriteCtx)
 	{
 		MS_TRACE();
-
-		int err;
-
-		this->uvReadHandle       = new uv_async_t;
-		this->uvReadHandle->data = static_cast<void*>(this);
-
-		err =
-		  uv_async_init(DepLibUV::GetLoop(), this->uvReadHandle, reinterpret_cast<uv_async_cb>(onAsync));
-
-		if (err != 0)
-		{
-			delete this->uvReadHandle;
-			this->uvReadHandle = nullptr;
-
-			MS_THROW_ERROR("uv_async_init() failed: %s", uv_strerror(err));
-		}
-
-		err = uv_async_send(this->uvReadHandle);
-
-		if (err != 0)
-		{
-			delete this->uvReadHandle;
-			this->uvReadHandle = nullptr;
-
-			MS_THROW_ERROR("uv_async_send() failed: %s", uv_strerror(err));
-		}
 	}
 
 	PayloadChannelSocket::~PayloadChannelSocket()
@@ -100,12 +59,6 @@ namespace PayloadChannel
 
 		this->closed = true;
 
-		if (this->uvReadHandle)
-		{
-			uv_close(
-			  reinterpret_cast<uv_handle_t*>(this->uvReadHandle), static_cast<uv_close_cb>(onCloseAsync));
-		}
-
 		if (this->consumerSocket)
 		{
 			this->consumerSocket->Close();
diff --git a/worker/src/handles/UnixStreamSocket.cpp b/worker/src/handles/UnixStreamSocket.cpp
index 8d8037d3..0e80dfd7 100644
--- a/worker/src/handles/UnixStreamSocket.cpp
+++ b/worker/src/handles/UnixStreamSocket.cpp
@@ -7,304 +7,5 @@
 // #define MS_LOG_DEV_LEVEL 3
 
 #include "handles/UnixStreamSocket.hpp"
-#include "DepLibUV.hpp"
-#include "Logger.hpp"
-#include "MediaSoupErrors.hpp"
-#include <cstring> // std::memcpy()
 
-/* Static methods for UV callbacks. */
-
-inline static void onAlloc(uv_handle_t* handle, size_t suggestedSize, uv_buf_t* buf)
-{
-	auto* socket = static_cast<UnixStreamSocket*>(handle->data);
-
-	if (socket)
-		socket->OnUvReadAlloc(suggestedSize, buf);
-}
-
-inline static void onRead(uv_stream_t* handle, ssize_t nread, const uv_buf_t* buf)
-{
-	auto* socket = static_cast<UnixStreamSocket*>(handle->data);
-
-	if (socket)
-		socket->OnUvRead(nread, buf);
-}
-
-inline static void onWrite(uv_write_t* req, int status)
-{
-	auto* writeData = static_cast<UnixStreamSocket::UvWriteData*>(req->data);
-	auto* handle    = req->handle;
-	auto* socket    = static_cast<UnixStreamSocket*>(handle->data);
-
-	// Just notify the UnixStreamSocket when error.
-	if (socket && status != 0)
-		socket->OnUvWriteError(status);
-
-	// Delete the UvWriteData struct.
-	delete writeData;
-}
-
-// NOTE: We have different onCloseXxx() callbacks to avoid an ASAN warning by
-// ensuring that we call `delete xxx` with same type as `new xxx` before.
-inline static void onClosePipe(uv_handle_t* handle)
-{
-	delete reinterpret_cast<uv_pipe_t*>(handle);
-}
-
-inline static void onCloseShutdown(uv_handle_t* handle)
-{
-	delete reinterpret_cast<uv_shutdown_t*>(handle);
-}
-
-inline static void onShutdown(uv_shutdown_t* req, int /*status*/)
-{
-	auto* handle = req->handle;
-
-	delete req;
-
-	// Now do close the handle.
-	uv_close(reinterpret_cast<uv_handle_t*>(handle), static_cast<uv_close_cb>(onCloseShutdown));
-}
-
-/* Instance methods. */
-
-UnixStreamSocket::UnixStreamSocket(int fd, size_t bufferSize, UnixStreamSocket::Role role)
-  : bufferSize(bufferSize), role(role)
-{
-	MS_TRACE_STD();
-
-	int err;
-
-	this->uvHandle       = new uv_pipe_t;
-	this->uvHandle->data = static_cast<void*>(this);
-
-	err = uv_pipe_init(DepLibUV::GetLoop(), this->uvHandle, 0);
-
-	if (err != 0)
-	{
-		delete this->uvHandle;
-		this->uvHandle = nullptr;
-
-		MS_THROW_ERROR_STD("uv_pipe_init() failed: %s", uv_strerror(err));
-	}
-
-	err = uv_pipe_open(this->uvHandle, fd);
-
-	if (err != 0)
-	{
-		uv_close(reinterpret_cast<uv_handle_t*>(this->uvHandle), static_cast<uv_close_cb>(onClosePipe));
-
-		MS_THROW_ERROR_STD("uv_pipe_open() failed: %s", uv_strerror(err));
-	}
-
-	if (this->role == UnixStreamSocket::Role::CONSUMER)
-	{
-		// Start reading.
-		err = uv_read_start(
-		  reinterpret_cast<uv_stream_t*>(this->uvHandle),
-		  static_cast<uv_alloc_cb>(onAlloc),
-		  static_cast<uv_read_cb>(onRead));
-
-		if (err != 0)
-		{
-			uv_close(reinterpret_cast<uv_handle_t*>(this->uvHandle), static_cast<uv_close_cb>(onClosePipe));
-
-			MS_THROW_ERROR_STD("uv_read_start() failed: %s", uv_strerror(err));
-		}
-	}
-
-	// NOTE: Don't allocate the buffer here. Instead wait for the first uv_alloc_cb().
-}
-
-UnixStreamSocket::~UnixStreamSocket()
-{
-	MS_TRACE_STD();
-
-	delete[] this->buffer;
-
-	if (!this->closed)
-		Close();
-}
-
-void UnixStreamSocket::Close()
-{
-	MS_TRACE_STD();
-
-	if (this->closed)
-		return;
-
-	int err;
-
-	this->closed = true;
-
-	// Tell the UV handle that the UnixStreamSocket has been closed.
-	this->uvHandle->data = nullptr;
-
-	if (this->role == UnixStreamSocket::Role::CONSUMER)
-	{
-		// Don't read more.
-		err = uv_read_stop(reinterpret_cast<uv_stream_t*>(this->uvHandle));
-
-		if (err != 0)
-			MS_ABORT("uv_read_stop() failed: %s", uv_strerror(err));
-	}
-
-	// If there is no error and the peer didn't close its pipe side then close gracefully.
-	if (this->role == UnixStreamSocket::Role::PRODUCER && !this->hasError && !this->isClosedByPeer)
-	{
-		// Use uv_shutdown() so pending data to be written will be sent to the peer before closing.
-		auto* req = new uv_shutdown_t;
-		req->data = static_cast<void*>(this);
-		err       = uv_shutdown(
-      req, reinterpret_cast<uv_stream_t*>(this->uvHandle), static_cast<uv_shutdown_cb>(onShutdown));
-
-		if (err != 0)
-			MS_ABORT("uv_shutdown() failed: %s", uv_strerror(err));
-	}
-	// Otherwise directly close the socket.
-	else
-	{
-		uv_close(reinterpret_cast<uv_handle_t*>(this->uvHandle), static_cast<uv_close_cb>(onClosePipe));
-	}
-}
-
-void UnixStreamSocket::Write(const uint8_t* data, size_t len)
-{
-	MS_TRACE_STD();
-
-	if (this->closed)
-		return;
-
-	if (len == 0)
-		return;
-
-	// First try uv_try_write(). In case it can not directly send all the given data
-	// then build a uv_req_t and use uv_write().
-
-	uv_buf_t buffer = uv_buf_init(reinterpret_cast<char*>(const_cast<uint8_t*>(data)), len);
-	int written     = uv_try_write(reinterpret_cast<uv_stream_t*>(this->uvHandle), &buffer, 1);
-
-	// All the data was written. Done.
-	if (written == static_cast<int>(len))
-	{
-		return;
-	}
-	// Cannot write any data at first time. Use uv_write().
-	else if (written == UV_EAGAIN || written == UV_ENOSYS)
-	{
-		// Set written to 0 so pendingLen can be properly calculated.
-		written = 0;
-	}
-	// Any other error.
-	else if (written < 0)
-	{
-		MS_ERROR_STD("uv_try_write() failed, trying uv_write(): %s", uv_strerror(written));
-
-		// Set written to 0 so pendingLen can be properly calculated.
-		written = 0;
-	}
-
-	const size_t pendingLen = len - written;
-	auto* writeData         = new UvWriteData(pendingLen);
-
-	writeData->req.data = static_cast<void*>(writeData);
-	std::memcpy(writeData->store, data + written, pendingLen);
-
-	buffer = uv_buf_init(reinterpret_cast<char*>(writeData->store), pendingLen);
-
-	const int err = uv_write(
-	  &writeData->req,
-	  reinterpret_cast<uv_stream_t*>(this->uvHandle),
-	  &buffer,
-	  1,
-	  static_cast<uv_write_cb>(onWrite));
-
-	if (err != 0)
-	{
-		MS_ERROR_STD("uv_write() failed: %s", uv_strerror(err));
-
-		// Delete the UvSendData struct.
-		delete writeData;
-	}
-}
-
-inline void UnixStreamSocket::OnUvReadAlloc(size_t /*suggestedSize*/, uv_buf_t* buf)
-{
-	MS_TRACE_STD();
-
-	// If this is the first call to onUvReadAlloc() then allocate the receiving buffer now.
-	if (!this->buffer)
-		this->buffer = new uint8_t[this->bufferSize];
-
-	// Tell UV to write after the last data byte in the buffer.
-	buf->base = reinterpret_cast<char*>(this->buffer + this->bufferDataLen);
-
-	// Give UV all the remaining space in the buffer.
-	if (this->bufferSize > this->bufferDataLen)
-	{
-		buf->len = this->bufferSize - this->bufferDataLen;
-	}
-	else
-	{
-		buf->len = 0;
-
-		MS_ERROR_STD("no available space in the buffer");
-	}
-}
-
-inline void UnixStreamSocket::OnUvRead(ssize_t nread, const uv_buf_t* /*buf*/)
-{
-	MS_TRACE_STD();
-
-	if (nread == 0)
-		return;
-
-	// Data received.
-	if (nread > 0)
-	{
-		// Update the buffer data length.
-		this->bufferDataLen += static_cast<size_t>(nread);
-
-		// Notify the subclass.
-		UserOnUnixStreamRead();
-	}
-	// Peer disconnected.
-	else if (nread == UV_EOF || nread == UV_ECONNRESET)
-	{
-		this->isClosedByPeer = true;
-
-		// Close local side of the pipe.
-		Close();
-
-		// Notify the subclass.
-		UserOnUnixStreamSocketClosed();
-	}
-	// Some error.
-	else
-	{
-		MS_ERROR_STD("read error, closing the pipe: %s", uv_strerror(nread));
-
-		this->hasError = true;
-
-		// Close the socket.
-		Close();
-
-		// Notify the subclass.
-		UserOnUnixStreamSocketClosed();
-	}
-}
-
-inline void UnixStreamSocket::OnUvWriteError(int error)
-{
-	MS_TRACE_STD();
-
-	if (error != UV_EPIPE && error != UV_ENOTCONN)
-		this->hasError = true;
-
-	MS_ERROR_STD("write error, closing the pipe: %s", uv_strerror(error));
-
-	Close();
-
-	// Notify the subclass.
-	UserOnUnixStreamSocketClosed();
-}
+UnixStreamSocket::Writer UnixStreamSocket::writer_;
\ No newline at end of file
